{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Reference","text":"<p>Small sample script to extract a table from a pdf (not any pdf!) and convert and dump it to xml data structure</p>"},{"location":"#main.ATTRIBUTE","title":"<code>ATTRIBUTE</code>","text":"<p>All expected attributes inside an element</p> Source code in <code>src/main.py</code> <pre><code>class ATTRIBUTE(StrEnum):\n    \"\"\"All expected attributes inside an element\"\"\"\n\n    DATA_TYPE = \"type\"\n    \"\"\"The data type associated with the property.\"\"\"\n\n    FLAG = \"flag\"\n    \"\"\"A flag indicating property status.\"\"\"\n\n    INFO = \"information\"\n    \"\"\"Additional information or description.\"\"\"\n\n    UNKNOWN = \"unknown\"\n    \"\"\"If no value was found.\"\"\"\n</code></pre>"},{"location":"#main.ATTRIBUTE.DATA_TYPE","title":"<code>DATA_TYPE = 'type'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The data type associated with the property.</p>"},{"location":"#main.ATTRIBUTE.FLAG","title":"<code>FLAG = 'flag'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>A flag indicating property status.</p>"},{"location":"#main.ATTRIBUTE.INFO","title":"<code>INFO = 'information'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Additional information or description.</p>"},{"location":"#main.ATTRIBUTE.UNKNOWN","title":"<code>UNKNOWN = 'unknown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>If no value was found.</p>"},{"location":"#main.ERROR_MSG","title":"<code>ERROR_MSG</code>","text":"<p>Collection of all error messages</p> Source code in <code>src/main.py</code> <pre><code>class ERROR_MSG(StrEnum):\n    \"\"\"Collection of all error messages\"\"\"\n    NO_TABLE = \"There is no table\"\n    \"\"\"\"\"\"\n\n    EMPTY_TABLE = \"Your table is empty\"\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"#main.ERROR_MSG.EMPTY_TABLE","title":"<code>EMPTY_TABLE = 'Your table is empty'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#main.ERROR_MSG.NO_TABLE","title":"<code>NO_TABLE = 'There is no table'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"#main.build_xml_struct","title":"<code>build_xml_struct(table, document_element_name)</code>","text":"<p>Build a XML structure (tree) based on your table</p> <p>Parameters:</p> <ul> <li> <code>table</code>               (<code>Table_PDF</code>)           \u2013            <p>table you want to transform into an XML structure</p> </li> <li> <code>document_element_name</code>               (<code>str</code>)           \u2013            <p>name of your document element</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>There is no table</p> </li> <li> <code>ValueError</code>             \u2013            <p>Your table is empty</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Element</code> (              <code>Element</code> )          \u2013            <p>your XML structure (tree)</p> </li> </ul> Source code in <code>src/main.py</code> <pre><code>def build_xml_struct(table: Table_PDF, document_element_name: str) -&gt; Element:\n    \"\"\"Build a XML structure (tree) based on your table\n\n    Args:\n        table (Table_PDF): table you want to transform into an XML structure\n        document_element_name (str): name of your document element\n\n    Raises:\n        ValueError: There is no table\n        ValueError: Your table is empty\n\n    Returns:\n        Element: your XML structure (tree)\n    \"\"\"\n    if table is None:\n        raise ValueError(ERROR_MSG.NO_TABLE)\n\n    root = Element(document_element_name)\n    header = table.pop(0)  # remove header\n\n    if header is None:\n        raise ValueError(ERROR_MSG.EMPTY_TABLE)\n\n    for row in table:\n        if any(element is None for element in row):\n            continue\n\n        # 'or \"UNKNOWN\"' is not necessary I think, but linter doesn't understand\n        property = SubElement(root, row[0] or ATTRIBUTE.UNKNOWN)\n\n        property.set(ATTRIBUTE.DATA_TYPE, row[1] or ATTRIBUTE.UNKNOWN)\n        property.set(ATTRIBUTE.FLAG     , row[2] or ATTRIBUTE.UNKNOWN)\n        property.set(ATTRIBUTE.INFO     , row[3] or ATTRIBUTE.UNKNOWN)\n\n    return root\n</code></pre>"},{"location":"#main.export_xml_struct","title":"<code>export_xml_struct(xml_struct, filename)</code>","text":"<p>Dump your XML object to a file</p> <p>Parameters:</p> <ul> <li> <code>xml_struct</code>               (<code>Element</code>)           \u2013            <p>your XML structure</p> </li> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>name of your XML file</p> </li> </ul> Source code in <code>src/main.py</code> <pre><code>def export_xml_struct(xml_struct: Element, filename: str) -&gt; None:\n    \"\"\"Dump your XML object to a file\n\n    Args:\n        xml_struct (Element): your XML structure\n        filename (str): name of your XML file\n    \"\"\"\n    xml_str = tostring(xml_struct)\n\n    with open(filename, \"wb\") as f:\n        f.write(xml_str)\n</code></pre>"},{"location":"#main.extract_table_from_pdf_file","title":"<code>extract_table_from_pdf_file(filename, page_number)</code>","text":"<p>Extract a table from any given PDF file</p> <p>Parameters:</p> <ul> <li> <code>filename</code>               (<code>str</code>)           \u2013            <p>filename (with path) to your pdf e.g. path/to/my.pdf</p> </li> <li> <code>page_number</code>               (<code>int</code>)           \u2013            <p>page number where you expect your table to find (page number starts by 0)</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Table_PDF</code> (              <code>Table_PDF</code> )          \u2013            <p>returns nested list of your table or None (if no table was found)</p> </li> </ul> Source code in <code>src/main.py</code> <pre><code>def extract_table_from_pdf_file(filename: str, page_number: int) -&gt; Table_PDF:\n    \"\"\"Extract a table from any given PDF file\n\n    Args:\n        filename (str): filename (with path) to your pdf e.g. path/to/my.pdf\n        page_number (int): page number where you expect your table to find (page number starts by 0)\n\n    Returns:\n        Table_PDF: returns nested list of your table or None (if no table was found)\n    \"\"\"\n    with pdfplumber.open(filename) as pdf:\n        target_page = pdf.pages[page_number]\n        return target_page.extract_table(table_settings={\"vertical_strategy\": \"text\"})\n</code></pre>"}]}